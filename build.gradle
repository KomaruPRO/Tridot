buildscript{
    repositories{
        mavenLocal()
        mavenCentral()
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = 'https://maven.parchmentmc.org' }
    }

    dependencies{
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '6.0.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

plugins{
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin' version '[0.7,0.8)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
}

group = mod_group_id
version = mod_version
base{
    archivesName = mod_id
}

repositories{
    mavenLocal()
    mavenCentral()
    maven { url = "https://maven.theillusivec4.top/" }
    maven { url = "https://maven.tterrag.com/" }
    maven { url = "https://modmaven.k-4u.nl"}
    maven { url = "https://cursemaven.com" }
    maven { url = "https://maven.blamejared.com" }
}

dependencies{
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    compileOnly fg.deobf("top.theillusivec4.curios:curios-forge:5.9.1+1.20.1")
    compileOnly fg.deobf("curse.maven:oculus-581495:5299671")

    runtimeOnly fg.deobf("mezz.jei:jei-1.20.1-forge:15.8.2.25")
    runtimeOnly fg.deobf("curse.maven:jade-324717:5493390")
    runtimeOnly fg.deobf("curse.maven:fusion-connected-textures-854949:5129294")
    runtimeOnly fg.deobf("curse.maven:configured-457570:5180900")
    runtimeOnly fg.deobf("curse.maven:model-gap-fix-676136:5200949")
    runtimeOnly fg.deobf("curse.maven:embeddium-908741:5566632")
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
sourceSets.main.resources{ srcDir 'src/generated/resources' }
minecraft{
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs{
        configureEach{
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            mods{
                "${mod_id}"{
                    source sourceSets.main
                }
            }
        }

        client{
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server{
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer{
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data{
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

mixin{
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
}

task apiJar(type: Jar) {
    archiveClassifier.set('api')
    from sourceSets.main.allSource
    from sourceSets.main.output
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task javadocJar(type: Jar) {
    dependsOn javadoc
    from javadoc.destinationDir
    archiveClassifier.set('javadoc')
}

artifacts {
    archives sourcesJar
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
            artifact sourcesJar
            artifact apiJar
        }
    }

    repositories{
        maven{
            url "https://maven.komaru.ru/repository/maven-releases/"
            credentials{
                username "admin"
                password System.getenv("maventoken")
            }
        }
    }
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.named('processResources', ProcessResources).configure{
    var replaceProperties = [minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
                             forge_version       : forge_version, forge_version_range: forge_version_range,
                             loader_version_range: loader_version_range,
                             mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
                             mod_authors         : mod_authors, mod_description: mod_description,]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']){
        expand replaceProperties + [project: project]
    }
}


jar {
    manifest {
        attributes(["Specification-Title"     : mod_id,
                    "Specification-Vendor"    : mod_authors,
                    "Specification-Version"   : 1,
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : project.jar.archiveVersion,
                    "Implementation-Vendor"   : mod_authors,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    "MixinConfigs": "valoria.mixins.json"],)
    }
}

jar.finalizedBy('reobfJar')
tasks.withType(JavaCompile).configureEach{
    options.encoding = 'UTF-8'
}
